<%@meta language="R-vignette" content="--------------------------------
%\VignetteIndexEntry{List Environments}
%\VignetteAuthor{Henrik Bengtsson}
%\VignetteKeyword{R}
%\VignetteKeyword{package}
%\VignetteKeyword{vignette}
%\VignetteKeyword{listenv}
%\VignetteEngine{R.rsp::rsp}
%\VignetteTangle{FALSE}
--------------------------------------------------------------------"%>
<%
R.utils::use("R.utils")
use("listenv")
options("withCapture/newline"=FALSE)
%>
# <%@meta name="title"%>

## Introduction
_List environments_ are environments that have list-like properties
such as _indexed_ subsetting and dimensions.

For example,
```r
<%=withCapture({
x <- listenv(a=2, b=3, c="hello")
length(x)
names(x)
x$a
x[[3]] <- toupper(x[[3]])
x$c
x$d <- x$a + x[["b"]]
x[[4]]
})%>
```

### Coercing to lists and vectors

Coercing a list environment to a list:
```r
<%=withCapture({
x <- listenv(a=2, b=3, c="hello")
x
y <- as.list(x)
str(y)
})%>
```

Coercing a list to a list environment:
```r
<%=withCapture({
z <- as.listenv(y)
z
all.equal(z, x)
})%>
```


Coercing a list environment to a vector ("unlisting"):
```r
<%=withCapture({
unlist(x)
unlist(x[-3])
unlist(x[1:2], use.names=FALSE)
})%>
```


### List environment with initial set of elements

```r
<%=withCapture({
x <- listenv(a=1, b=c("hello", "world"), c=list(d=42L, e=pi))
x
names(x)
str(as.list(x))
})%>
```


### Empty list environment with given length
```r
<%=withCapture({
x <- listenv()
length(x) <- 3
length(x)
names(x)
str(as.list(x))
})%>
```

### Assigning names to elements
```r
<%=withCapture({
x <- listenv()
length(x) <- 3
names(x) <- letters[1:3]
names(x)
names(x)[2] <- "B"
str(as.list(x))
})%>
```

## Methods
```r
<%=withCapture({
x <- listenv()
length(x) <- 3
seq_along(x)
})%>
```


### Examples
Here is a longer set of examples illustrating what the list environments provides:
```r
<%=withCapture({
x <- listenv()
x[[1]] <- { 1 }
x[[3]] <- { "Hello world!" }
length(x)
seq_along(x)
names(x) <- c("a", "b", "c")
x[['b']]
x$b <- TRUE
x[[1]]
str(as.list(x))
x[c('a', 'c')] <- list(2, "Hello again!")
y <- x[3:2]
str(as.list(y))
})%>
```

## Multi-dimensional list environments

Contrary to regular environments and similarly to lists, a list environments can have dimensions with corresponding names.  For example,
```r
<%=withCapture({
x <- as.listenv(1:6)
dim(x) <- c(2,3)
dimnames(x) <- list(c("a", "b"), c("A", "B","C"))
x
})%>
```
An easy way to quickly get an overview is to coerce to a list, e.g.
```r
<%=withCapture({
as.list(x)
})%>
```
Individual elements of a list environment can be accessed using standard subsetting syntax, e.g.
```r
<%=withCapture({
x[["a", "B"]]
x[[1, 2]]
x[[1, "B"]]
})%>
```
We can assign individual elements similarly, e.g.
```r
<%=withCapture({
x[["b", "B"]] <- -x[["b", "B"]]
as.list(x)
})%>
```

Concurrently with dimensional names it is possible to have names of the invidual elements just as for list environments without dimensions.  For example,
```r
<%=withCapture({
names(x) <- letters[seq_along(x)]
x
x[["a"]]
x[["f"]]
x[c("a", "f")]
unlist(x)
})%>
```

Note, whenever dimensions are set using `dim(x) <- dims` both the dimensional names and the element names are removed.  This is by definition, cf. `help("dim", package="base")`.  This behavior is annoying if one wants to remove the dimensions but keep the names of the elements, e.g.
```r
> dim(x) <- NULL
> names(x)
NULL
```
Because of this, the listenv package provides the `undim()` function, which removes the dimensions but preserves the names, e.g.
```r
<%=withCapture({
x <- undim(x)
names(x)
})%>
```


### Limitations
The current implementation does _not_ support _dimensional subsetting_ of more than one element.  For instance, `x[1,]` is not supported by this version.


[listenv]: http://cran.r-project.org/package=listenv

---
Copyright Henrik Bengtsson, 2015
